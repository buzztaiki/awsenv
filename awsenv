#!/bin/bash
# shellcheck disable=SC2155

token_duration=''
cache_dir=$HOME/.cache/awsenv
no_cache=0

usage_exit() {
  cat <<EOF
Usage: $0 [options...] [command [args...]]
       $0 [options...]

Set AWS environment variables and execute.
If no command given, awsenv output credential environment variables for exporting.


Options:

  -p PROFILE    specify profile
  -C            flag don't use cache
  -d DURATION   specify token duration
  -h            show this help


For more information, see <https://github.com/buzztaiki/awsenv>.

EOF
  exit "$1"
}

export_variable() {
  local shell="$1" key="$2" value="$3"
  if [ "$shell" = fish ]; then
    echo "set -x $key '$value'"
  else
    echo "export $key='$value'"
  fi
}

credentials_json() {
  local mfa_serial="$(aws configure get mfa_serial)"
  local source_profile="$(aws configure get source_profile)"
  local role_arn="$(aws configure get role_arn)"
  local mfa_token
  local opts=()

  if [ -n "$mfa_serial" ]; then
    read -rp 'MFA Token: ' mfa_token
    opts=(--serial-number "$mfa_serial" --token-code "$mfa_token")
  fi

  if [ -n "$token_duration" ]; then
    opts=("${opts[@]}" --duration "$token_duration")
  fi

  if [ -n "$source_profile" ] && [ -n "$role_arn" ]; then
    aws --output json --profile "$source_profile" sts assume-role --role-arn "$role_arn" --role-session-name aws-env-"$(date +%s)" "${opts[@]}"
  else
    aws --output json sts get-session-token "${opts[@]}"
  fi
}

credentials_cache_not_expired() {
  local cache="$1"

  [ -f "$cache" ] || return 1
  # treat empty cache
  [ -n "$(jq < "$cache")" ] || return 1

  jq --exit-status '(.Credentials.Expiration | fromdate) > now' < "$cache" > /dev/null
}

credentials_json_or_cache() {
  local cache=$cache_dir/$AWS_PROFILE.json
  mkdir -p "$cache_dir"

  if [ "$no_cache" = 1 ]; then
    rm -f "$cache"
  fi

  if ! credentials_cache_not_expired "$cache"; then
    credentials_json > "$cache"
    chmod 600 "$cache"
  fi

  cat "$cache"
}

region() {
  local region="$(aws configure get region)"
  if [ -n "$region" ]; then
    echo "$region"
  else
    echo "$AWS_DEFAULT_REGION"
  fi
}

export_env() {
  local shell="$1"
  local json=$(credentials_json_or_cache)
  local region=$(region)

  export_variable "$shell" AWS_PROFILE "$AWS_PROFILE"
  export_variable "$shell" AWS_DEFAULT_REGION "$region"
  export_variable "$shell" AWS_REGION "$region"
  export_variable "$shell" AWS_ACCESS_KEY_ID "$(echo "$json" | jq '.Credentials.AccessKeyId' -r)"
  export_variable "$shell" AWS_SECRET_ACCESS_KEY "$(echo "$json" | jq '.Credentials.SecretAccessKey' -r)"
  export_variable "$shell" AWS_SESSION_TOKEN "$(echo "$json" | jq '.Credentials.SessionToken' -r)"
}

validate_profile() {
  env -u AWS_PROFILE aws configure --profile "$AWS_PROFILE" get aws_access_key_id > /dev/null
  # profile not found
  [ $? -eq 255 ] && exit 1
}

while getopts p:eCd:h OPT
do
  case $OPT in
    p) AWS_PROFILE=$OPTARG ;;
    e) ;; # deprecated
    C) no_cache=1 ;;
    d) token_duration=$OPTARG ;;
    h) usage_exit 0 ;;
    *) usage_exit 1 1>&2 ;;
  esac
done
shift $((OPTIND - 1))

export AWS_PROFILE
validate_profile

# set token_duration from profile if empty
if [ -z "$token_duration" ]; then
  token_duration="$(aws configure get token_duration)"
fi

if [ $# -eq 0 ]; then
  export_env "$(basename "$SHELL")"
else
  eval "$(export_env bash)"
  "$@"
fi
